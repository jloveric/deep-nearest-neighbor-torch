data: mnist
target_accuracy: 0.90
device: cuda
pin_memory: True
batch_size: 64
max_neighbors: 100000
train_network: False
max_count: 3
kernel_type: "cosine"
epsilon: 1e-6
exponent: -2
scales: 4
influence_cone_factor: 2
num_layers: 3

in_features: 784
out_features: 128

max_epochs: 100
gpus: 1

mlp:
  style: high-order # low-order (standard relu network)
  nonlinearity: null
  layer_type: "continuous"
  n: 2
  n_in: null
  n_out: null
  n_hidden: null
  resnet: False
  # We don't need this if we use max_abs normalization (it seems)
  periodicity: null #2.0

  rescale_output: False
  scale: 2.0
  normalize: False # maxabs # False, maxabs, midrange, instance
  segments: 2
  input:
    segments: ${mlp.segments}
    width: ${in_features}
  output:
    segments: ${mlp.segments}
    width: 128
  hidden:
    segments: ${mlp.segments}
    layers: 4
    width: 20

# featurize be splitting the neighbors
# into "splits" sets so the feature output
# is splits*num_classes instead of num_classes
splits: 4

hydra:
  run:
    dir: ./outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}
  job:
    chdir: True
